/*
 * Copyright (C) 2019  AniTrend
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id("com.android.application")
    id("kotlin-android")
    id("kotlin-kapt")
    id("kotlin-android-extensions")
}

apply from: "../gradle/gradle-common-config.gradle"
apply from: "../gradle/gradle-common-config-app.gradle"
apply from: "../gradle/gradle-common-dependencies.gradle"

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

import com.android.build.OutputFile

android {
    defaultConfig {
        applicationId "co.anitrend"
    }
    buildTypes {
        release {
            applicationVariants.all { variant ->
                variant.outputs.all {
                    def abi = getFilter(OutputFile.ABI) ?: "universal"
                    def code = defaultConfig.versionCode
                    def name = defaultConfig.versionName
                    outputFileName = "anitrend_v${name}_rc_${code}_${abi}_${variant.name}.apk"
                }
            }
        }
    }
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'armeabi',
                    'mips', 'mips64',
                    'x86', 'x86_64'
            universalApk true
        }
    }
    project.ext.versionCodes = [
            'armeabi': 1, 'armeabi-v7a': 2, 'arm64-v8a': 3,
            'mips': 5, 'mips64': 6,
            'x86': 8, 'x86_64': 9
    ]
}

ext {
    leakCanary = '2.2'
}

dependencies {

    /** Project Modules */
    implementation project(":app-core")
    implementation project(":app-data")
    implementation project(":app-domain")

    /** Feature Modules */
    implementation project(":app-splash")
    implementation project(":app-navigation")
    implementation project(":app-onboarding")

    /** Dynamic Modules */
    runtimeOnly project(":feature-about")
    runtimeOnly project(":feature-account")
    runtimeOnly project(":feature-news")
    runtimeOnly project(":feature-search")
    runtimeOnly project(":feature-settings")
    runtimeOnly project(":feature-profile")

    /** Platform Dependencies */
    implementation project(":support-domain")
    implementation project(":support-theme")
    implementation project(":support-core")
    implementation project(":support-ext")
    implementation project(":support-ui")

    /** Koin AndroidX Dependency Injection */
    implementation("org.koin:koin-androidx-viewmodel:$koin")

    /** Material Design */
    implementation "com.google.android.material:material:$material"

    /** Architecture Components */
    implementation("androidx.core:core-ktx:$ktx")
    implementation("androidx.paging:paging-runtime:$paging")
    implementation("androidx.paging:paging-runtime-ktx:$pagingKtx")
    implementation("androidx.viewpager2:viewpager2:$viewPager2X")
    implementation("androidx.fragment:fragment-ktx:$fragmentKtx")
    implementation("androidx.work:work-runtime-ktx:$workerKtx")
    implementation("androidx.lifecycle:lifecycle-extensions:$lifecycleX")
    implementation("androidx.constraintlayout:constraintlayout:$constraintX")

    /** Glide Libraries */
    implementation("com.github.bumptech.glide:glide:$glide")

    /** Flex Box */
    implementation("com.google.android:flexbox:$flexBox")

    /** Smart Tab Layout */
    implementation("com.ogaclejapan.smarttablayout:library:$smartTab")

    /** Tap Target Prompt */
    implementation("uk.co.samuelwall:material-tap-target-prompt:$tapTarget")

    /** Testing-only dependencies */
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso")

    /** debugImplementation because LeakCanary should only run in debug builds. */
    debugImplementation("com.squareup.leakcanary:leakcanary-android:$leakCanary")
}

if (file("google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'io.fabric'
}
